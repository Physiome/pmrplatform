[package]
name = "pmrapp"
version = "0.0.1"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
ammonia = { workspace = true, optional = true }
anyhow = { workspace = true, optional = true }
axum = { workspace = true, optional = true }
axum-login = { workspace = true, optional = true }
clap = { workspace = true, features = ["derive", "env"], optional = true }
console_error_panic_hook = { workspace = true }
dotenvy = { workspace = true, optional = true }
gloo-utils = { workspace = true }
html-escape = { workspace = true }
js-sys = { workspace = true, optional = true }
leptos = { workspace = true, features = ["rkyv"] }
leptos_axum = { workspace = true, optional = true }
leptos_meta = { workspace = true }
leptos_router = { workspace = true }
pmrac = { workspace = true, optional = true, features = ["axum-login"] }
pmrcore = { workspace = true }
pmrctrl = { workspace = true, optional = true }
pmrmodel = { workspace = true, optional = true }
pmrrepo = { workspace = true, optional = true }
pmrtqs = { workspace = true, optional = true }
serde = { workspace = true, features = ["derive"] }
sqlx = { workspace = true, features = ["sqlite"], optional = true }
stderrlog = { workspace = true, optional = true }
tokio = { workspace = true, features = ["rt-multi-thread"], optional = true }
tower = { workspace = true, optional = true }
tower-http = { workspace = true, features = ["fs"], optional = true }
tower-sessions = { workspace = true, optional = true }
wasm-bindgen = { workspace = true }
web-sys = { workspace = true, features = ["Document", "Event", "EventTarget", "Performance", "Window"], optional = true }
thiserror = { workspace = true }
time = { workspace = true }
tracing = { workspace = true, optional = true }
http = { workspace = true }

[features]
hydrate = [
    "leptos/hydrate",
    "dep:js-sys",
    "dep:web-sys",
]
ssr = [
    "dep:ammonia",
    "dep:anyhow",
    "dep:axum",
    "dep:axum-login",
    "dep:clap",
    "dep:dotenvy",
    "dep:pmrac",
    "dep:pmrctrl",
    "dep:pmrmodel",
    "dep:pmrrepo",
    "dep:pmrtqs",
    "dep:sqlx",
    "dep:stderrlog",
    "dep:tokio",
    "dep:tower",
    "dep:tower-http",
    "dep:tower-sessions",
    "dep:leptos_axum",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "dep:tracing",
]

# Defines a size-optimized profile for the WASM bundle in release mode
# [profile.wasm-release]
# inherits = "release"
# opt-level = 'z'
# lto = true
# codegen-units = 1
# panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "pmrapp"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
